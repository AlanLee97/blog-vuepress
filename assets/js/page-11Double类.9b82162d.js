(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{799:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_11-double类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-double类"}},[t._v("#")]),t._v(" 11.Double类")]),t._v(" "),a("h4",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识：")]),t._v(" "),a("p",[t._v("1.浮点数的表示：\n浮点数由三部分组成，符号位s、指数e和尾数f。\n对于float表示如下\n0                       00000000            00000000000000000000000\nsign(1bit)        exponent(8bit)                fraction(23bit)                                   共32bit\n对于求值我们是有一个公式对应的，某个浮点数的值为：\n(−1)^s ∗    (1.f)   ∗   2^(e−127)\n可以看到32位的最高位为符号标识符，1表示负数，0表示正数。指数部分为8位，其实可以是0到255，但是为了可正可负，这里需要减去127后才是真正的指数，而底数固定为2。剩下的23位表示尾数，但默认前面都会加上1.。所以通过上面就可以将一个浮点数表示出来了。\n我们举个例子来看，二进制的“01000001001101100000000000000000”表示的浮点数是啥？\n符号位为0，表示正数。\n指数为“10000010”，减去127后为3。\n尾数对应的值为“1.011011”。\n于是最终得到浮点数为“1011.011”，转成十进制为“11.375”。\n2.精度丢失:\n对float或double 的使用不当，可能会出现精度丢失的问题。浮点运算很少是精确的，只要是超过精度能表示的范围就会产生误差。往往产生误差不是 因为数的大小，而是因为数的精度。因此，产生的结果接近但不等于想要的结果。尤其在使用 float 和 double 作精确运 算的时候要特别小心。如:\nSystem.out.println(0.1d + 0.2d);这个输出的结果不是我们想要的0.3而是0.30000000000000004。这就是java中的精度丢失。可以使用如下方式解决：")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigDecimal")]),t._v(" b1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("BigDecimal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigDecimal")]),t._v(" b2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("BigDecimal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("out")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("所以大家在遇到金钱等对精度要求较高的业务时最好不要使用浮点类型的数。可以考虑使用BigDecimal。或是把单位转换成分，这样处理的数字都是整数，最后再化成小数。这样就不会出现精度丢失的问题了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);