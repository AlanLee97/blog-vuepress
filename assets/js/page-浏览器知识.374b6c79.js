(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{919:function(t,a,s){"use strict";s.r(a);var r=s(1),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器知识"}},[t._v("#")]),t._v(" 浏览器知识")]),t._v(" "),s("h3",{attrs:{id:"一、浏览器工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、浏览器工作原理"}},[t._v("#")]),t._v(" 一、浏览器工作原理")]),t._v(" "),s("h4",{attrs:{id:"_1-chrome架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-chrome架构"}},[t._v("#")]),t._v(" 1. chrome架构")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("最新的 Chrome 进程架构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618468640202-ee3d92ff-e201-4d67-91dd-c8d31b13cfe1.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从图中可以看出，最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("浏览器进程")]),t._v("。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("渲染进程")]),t._v("。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("GPU 进程")]),t._v("。Chrome 的 UI 界面选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。Chrome 在其多进程架构上也引入了 GPU 进程。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("网络进程")]),t._v("。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("插件进程")]),t._v("。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),t._v(" "),s("h4",{attrs:{id:"_2-互联网中的数据传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-互联网中的数据传输"}},[t._v("#")]),t._v(" 2. 互联网中的数据传输")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("互联网中的数据是通过数据包来传输的。如果发送的数据很大，那么该数据就会被拆分为很多小数据包来传输。")]),t._v(" "),s("p",[t._v("数据传输需要使用同一的协议：IP、TCP、UDP")]),t._v(" "),s("p",[t._v("IP：互联网上不同的在线设备都有唯一的地址，地址只是一个数字")]),t._v(" "),s("p",[t._v("TCP：")]),t._v(" "),s("p",[t._v("UDP：")]),t._v(" "),s("p",[s("strong",[t._v("IP")])]),t._v(" "),s("p",[t._v("把网络简单分为三层结构，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618584878438-80d1f41b-f78a-4328-969f-6363dc880336.png",alt:"img"}})]),t._v(" "),s("p",[s("strong",[t._v("UDP")])]),t._v(" "),s("p",[t._v("UDP 通过端口号把数据包分发给正确的程序。")]),t._v(" "),s("p",[t._v("把前面的三层结构扩充为四层结构，在网络层和上层之间增加了传输层，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618585009657-9c1ad7e1-44a3-4a95-a140-18a38329a302.png",alt:"img"}})]),t._v(" "),s("p",[t._v("UDP 不能保证数据可靠性，但是传输速度却非常快，所以 UDP 会应用在一些关注速度、但不那么严格要求数据完整性的领域，如在线视频、互动游戏等。")]),t._v(" "),s("p",[s("strong",[t._v("TCP")])]),t._v(" "),s("p",[t._v("把数据完整地送达应用程序")]),t._v(" "),s("p",[t._v("TCP 下的单个数据包的传输流程：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618585193083-957b5af8-bdc1-4e7c-b024-76bbf2f75d85.png",alt:"img"}})]),t._v(" "),s("p",[t._v("TCP传输数据是需要进行连接的，一个完整的 TCP 连接的生命周期包括了“"),s("strong",[t._v("建立连接")]),t._v("”“"),s("strong",[t._v("传输数据")]),t._v("”和“"),s("strong",[t._v("断开连接")]),t._v("”三个阶段， TCP 连接过程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618585381393-bac41002-db59-44a9-b58d-9a1ad8d67ba2.png",alt:"img"}})]),t._v(" "),s("p",[t._v("TCP 为了保证数据传输的可靠性，牺牲了数据包的传输速度")]),t._v(" "),s("h4",{attrs:{id:"_3-http请求流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-http请求流程"}},[t._v("#")]),t._v(" 3. HTTP请求流程")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("浏览器端发起 HTTP 请求流程")])]),t._v(" "),s("p",[s("strong",[t._v("（1）构建请求")])]),t._v(" "),s("p",[t._v("首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。")]),t._v(" "),s("p",[s("strong",[t._v("（2）查找缓存")])]),t._v(" "),s("p",[t._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。")]),t._v(" "),s("p",[t._v("这样做的好处是"),s("strong",[t._v("缓解服务器端压力，提升性能")]),t._v("（获取资源的耗时更短了）；如果缓存查找失败，就会进入网络请求过程了。")]),t._v(" "),s("p",[s("strong",[t._v("（3）准备 IP 地址和端口")])]),t._v(" "),s("p",[t._v("浏览器使用 HTTP 协议作为应用层协议，用来封装请求的文本信息；并使用 TCP/IP 作传输层协议将它发到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。HTTP 的内容是通过 TCP 的传输数据阶段来实现的，二者的关系如图所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618586201548-a5aaa19e-7a2e-47b9-ba2a-d3f5d7cc0d59.png",alt:"img"}})]),t._v(" "),s("p",[t._v("第一步浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了 DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求。")]),t._v(" "),s("p",[t._v("拿到 IP 之后，接下来就需要获取端口号了。通常情况下，如果 URL 没有特别指明端口号，那么 HTTP 协议默认是 80 端口。")]),t._v(" "),s("p",[s("strong",[t._v("（4）等待 TCP 队列")])]),t._v(" "),s("p",[t._v("把端口和 IP 地址都准备好之后，Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。如果当前请求数量少于 6，会直接进入下一步，建立 TCP 连接。")]),t._v(" "),s("p",[s("strong",[t._v("（5）建立TCP连接")])]),t._v(" "),s("p",[t._v("在 HTTP 工作开始之前，浏览器通过 TCP 与服务器建立连接。")]),t._v(" "),s("p",[s("strong",[t._v("（6）发送HTTP请求")])]),t._v(" "),s("p",[t._v("建立了 TCP 连接之后，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。")]),t._v(" "),s("p",[t._v("结合下图来理解，浏览器是如何发送请求信息给服务器的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618586979134-6b1ab20c-b0b2-4c37-8407-05ed86ff95b9.png",alt:"img"}})]),t._v(" "),s("p",[t._v("请求行：告诉服务器浏览器需要什么资源。")]),t._v(" "),s("p",[t._v("请求头：把浏览器的一些基础信息告诉服务器。")]),t._v(" "),s("p",[t._v("请求体：发送给服务器的数据。")]),t._v(" "),s("p",[s("strong",[t._v("服务器端处理 HTTP 请求流程")])]),t._v(" "),s("p",[s("strong",[t._v("（1） 返回请求")])]),t._v(" "),s("p",[t._v("服务器处理结束，便可以返回数据给浏览器了。返回的结果如下图所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618587318224-94545490-24e2-42ef-ad9a-4ba1edffc531.png",alt:"img"}})]),t._v(" "),s("p",[t._v("响应行：包括协议版本和状态码。")]),t._v(" "),s("p",[t._v("响应头：包含了服务器自身的一些信息。")]),t._v(" "),s("p",[t._v("响应体：响应的数据。")]),t._v(" "),s("p",[s("strong",[t._v("（2）断开连接")])]),t._v(" "),s("p",[t._v("服务器向客户端返回了请求数据，它就要关闭 TCP 连接。")]),t._v(" "),s("p",[t._v("如果浏览器或者服务器在其头信息中加入了"),s("code",[t._v("Connection:Keep-Alive")]),t._v("，那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。"),s("strong",[t._v("保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。")])]),t._v(" "),s("p",[s("strong",[t._v("（3）重定向")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/743297/1618587956704-edd651fd-bbe5-4d30-88e2-2f9a2782eeb3.jpeg",alt:"img"}})]),t._v(" "),s("p",[t._v("从图中可以看到，响应行返回的状态码是 301，状态 301 就是告诉浏览器，我需要重定向到另外一个网址，而需要重定向的网址正是包含在响应头的 Location 字段中，接下来，浏览器获取 Location 字段中的地址，并使用该地址重新导航，这就是一个完整重定向的执行流程。")]),t._v(" "),s("h4",{attrs:{id:"_4-导航流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-导航流程"}},[t._v("#")]),t._v(" 4. 导航流程")]),t._v(" "),s("p",[t._v("用户发出 URL 请求到页面开始解析的这个过程，就叫做导航。")]),t._v(" "),s("p",[t._v("从输入 URL 到页面展示完整流程示意图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618621761684-baec2b75-3d5d-479a-a572-ff6dff9d327f.png",alt:"img"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器进程接收到用户输入的 URL 请求，并将该 URL 转发给网络进程。")])]),t._v(" "),s("li",[s("p",[t._v("在网络进程中发起真正的 URL 请求。")])]),t._v(" "),s("li",[s("p",[t._v("接着网络进程接收到了响应头数据，便解析响应头数据，并将数据转回给浏览器进程。")])]),t._v(" "),s("li",[s("p",[t._v("浏览器进程接收到网络进程的响应头数据之后，发送“提交导航 (CommitNavigation)”消息到渲染进程；")])]),t._v(" "),s("li",[s("p",[t._v("渲染进程接收到“提交导航”的消息之后，直接和网络进程建立数据管道，开始准备接收 HTML 数据；")])]),t._v(" "),s("li",[s("p",[t._v("最后渲染进程会向浏览器进程“确认提交”，告诉浏览器进程：“已经准备好接受和解析页面数据了”。")])]),t._v(" "),s("li",[s("p",[t._v("浏览器进程接收到渲染进程“提交文档”的消息之后，便开始移除之前旧的文档，然后更新浏览器进程中的页面状态。")])])]),t._v(" "),s("p",[s("strong",[t._v("（1）从输入URL到页面展示")])]),t._v(" "),s("p",[t._v("当用户在地址栏中输入一个查询关键字时，地址栏会判断输入的关键字是搜索内容，还是请求的 URL。")]),t._v(" "),s("ul",[s("li",[t._v("如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的 URL。")]),t._v(" "),s("li",[t._v("如果判断输入内容符合 URL 规则，比如输入的是 time.geekbang.org，那么地址栏会根据规则，把这段内容加上协议，合成为完整的 URL，如 https://time.geekbang.org。")])]),t._v(" "),s("p",[t._v("当用户输入关键字并键入回车之后，这意味着当前页面即将要被替换成新的页面，不过在这个流程继续之前，浏览器还给了当前页面一次执行 beforeunload 事件的机会，beforeunload 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面，比如当前页面可能有未提交完成的表单等情况，因此用户可以通过 beforeunload 事件来取消导航，让浏览器不再执行任何后续工作。")]),t._v(" "),s("p",[t._v("当浏览器刚开始加载一个地址之后，标签页上的图标便进入了加载状态，进入"),s("strong",[t._v("URL请求过程")]),t._v("。但此时浏览器中页面显示的依然是之前打开的页面内容，并没立即替换为新的页面。因为需要等待提交文档阶段，页面内容才会被替换。")]),t._v(" "),s("p",[s("strong",[t._v("（2）URL请求过程")])]),t._v(" "),s("p",[t._v("进入页面资源请求过程后，浏览器进程会通过进程间通信（IPC）把 URL 请求发送至网络进程，网络进程接收到 URL 请求后，会在这里发起真正的 URL 请求流程。请求过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("网络进程会查找本地缓存是否缓存了该资源。")])]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("如果有缓存资源，那么直接返回资源给浏览器进程；")]),t._v(" "),s("li",[t._v("如果在缓存中没有查找到资源，那么直接进入网络请求流程。")])])])]),t._v(" "),s("ol",[s("li",[t._v("网络请求前的第一步是要进行 DNS 解析，以获取请求域名的服务器 IP 地址。")])]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("如果请求协议是 HTTPS，那么还需要建立 TLS 连接。")])])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("接下来就是利用 IP 地址和服务器建立 TCP 连接。")])]),t._v(" "),s("li",[s("p",[t._v("连接建立之后，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。")])]),t._v(" "),s("li",[s("p",[t._v("服务器接收到请求信息后，会根据请求信息生成响应数据（包括响应行、响应头和响应体等信息），并发给网络进程。")])]),t._v(" "),s("li",[s("p",[t._v("网络进程接收了响应行和响应头之后，就开始解析响应头的内容了。")])])]),t._v(" "),s("p",[t._v("Chrome 的页面渲染是运行在渲染进程中的，所以接下来就需要"),s("strong",[t._v("准备渲染进程")]),t._v("了。")]),t._v(" "),s("p",[s("strong",[t._v("（3）准备渲染进程")])]),t._v(" "),s("p",[t._v("默认情况下，Chrome 会为每个页面分配一个渲染进程，也就是说，每打开一个新页面就会配套创建一个新的渲染进程。但是，也有一些例外，在打开同一站点的多个页面的情况下，浏览器会让多个页面直接运行在同一个渲染进程中。")]),t._v(" "),s("p",[t._v("渲染进程准备好之后，还不能立即进入文档解析状态，因为此时的文档数据还在网络进程中，并没有提交给渲染进程，所以下一步就进入了"),s("strong",[t._v("提交文档")]),t._v("阶段。")]),t._v(" "),s("p",[s("strong",[t._v("（4）提交文档")])]),t._v(" "),s("p",[t._v("浏览器进程将网络进程接收到的 HTML 数据提交给渲染进程，具体流程是这样的：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("首先当浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息；")])]),t._v(" "),s("li",[s("p",[t._v("渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”；")])]),t._v(" "),s("li",[s("p",[t._v("等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程；")])]),t._v(" "),s("li",[s("p",[t._v("浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新 Web 页面。")])])]),t._v(" "),s("p",[t._v("当浏览器进程确认提交之后，更新内容如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618623611613-763f5eaa-c2cd-4a2c-a667-9f60072315d2.png",alt:"img"}})]),t._v(" "),s("p",[t._v("到这里，一个完整的导航流程就“走”完了，这之后就要进入"),s("strong",[t._v("渲染阶段")]),t._v("了。")]),t._v(" "),s("p",[s("strong",[t._v("（5）渲染阶段")])]),t._v(" "),s("p",[t._v("一旦文档被提交，渲染进程便开始页面解析和子资源加载了。一旦页面生成完成，渲染进程会发送一个消息给浏览器进程，浏览器接收到消息后，会停止标签图标上的加载动画。")]),t._v(" "),s("p",[t._v("**面试题：**"),s("strong",[t._v("从输入 URL 到页面展示，这中间发生了什么？")])]),t._v(" "),s("p",[t._v("\\1. 用户输入URL，浏览器会根据用户输入的信息判断是搜索还是网址，如果是搜索内容，就将搜索内容+默认搜索引擎合成新的URL；如果用户输入的内容符合URL规则，浏览器就会根据URL协议，在这段内容上加上协议合成合法的URL")]),t._v(" "),s("p",[t._v("\\2. 用户输入完内容，按下回车键，浏览器导航栏显示loading状态，但是页面还是呈现前一个页面，这是因为新页面的响应数据还没有获得")]),t._v(" "),s("p",[t._v("\\3. 浏览器进程浏览器构建请求行信息，会通过进程间通信（IPC）将URL请求发送给网络进程GET /index.html HTTP1.1")]),t._v(" "),s("p",[t._v("\\4. 网络进程获取到URL，先去本地缓存中查找是否有缓存文件，如果有，拦截请求，直接200返回；否则，进入网络请求过程")]),t._v(" "),s("p",[t._v("\\5. 网络进程请求DNS返回域名对应的IP和端口号，如果之前DNS数据缓存服务缓存过当前域名信息，就会直接返回缓存信息；否则，发起请求获取根据域名解析出来的IP和端口号，如果没有端口号，http默认80，https默认443。如果是https请求，还需要建立TLS连接。")]),t._v(" "),s("p",[t._v("\\6. Chrome 有个机制，同一个域名同时最多只能建立 6 个TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。如果当前请求数量少于6个，会直接建立TCP连接。")]),t._v(" "),s("p",[t._v("\\7. TCP三次握手建立连接，http请求加上TCP头部——包括源端口号、目的程序端口号和用于校验数据完整性的序号，向下传输")]),t._v(" "),s("p",[t._v("\\8. 网络层在数据包上加上IP头部——包括源IP地址和目的IP地址，继续向下传输到底层")]),t._v(" "),s("p",[t._v("\\9. 底层通过物理网络传输给目的服务器主机")]),t._v(" "),s("p",[t._v("\\10. 目的服务器主机网络层接收到数据包，解析出IP头部，识别出数据部分，将解开的数据包向上传输到传输层")]),t._v(" "),s("p",[t._v("\\11. 目的服务器主机传输层获取到数据包，解析出TCP头部，识别端口，将解开的数据包向上传输到应用层")]),t._v(" "),s("p",[t._v("\\12. 应用层HTTP解析请求头和请求体，如果需要重定向，HTTP直接返回HTTP响应数据的状态code301或者302，同时在请求头的Location字段中附上重定向地址，浏览器会根据status code和Location进行重定向操作；如果不是重定向，首先服务器会根据 请求头中的If-None-Match 的值来判断请求的资源是否被更新，如果没有更新，就返回304状态码，相当于告诉浏览器之前的缓存还可以使用，就不返回新数据了；否则，返回新数据，200的状态码，并且如果想要浏览器缓存数据的话，就在相应头中加入字段：Cache-Control:Max-age=2000响应数据又顺着应用层——传输层——网络层——网络层——传输层——应用层的顺序返回到网络进程")]),t._v(" "),s("p",[t._v("\\13. 数据传输完成，TCP四次挥手断开连接。如果，浏览器或者服务器在HTTP头部加上如下信息，TCP就一直保持连接。保持TCP连接可以省下下次需要建立连接的时间，提示资源加载速度Connection:Keep-Alive")]),t._v(" "),s("p",[t._v("\\14. 网络进程将获取到的数据包进行解析，根据响应头中的Content-type来判断响应数据的类型，如果是字节流类型，就将该请求交给下载管理器，该导航流程结束，不再进行；如果是text/html类型，就通知浏览器进程获取到文档准备渲染")]),t._v(" "),s("p",[t._v("\\15. 浏览器进程获取到通知，根据当前页面B是否是从页面A打开的并且和页面A是否是同一个站点（根域名和协议一样就被认为是同一个站点），如果满足上述条件，就复用之前网页的进程，否则，新创建一个单独的渲染进程")]),t._v(" "),s("p",[t._v("\\16. 浏览器进程会发出“提交文档”的消息给渲染进程，渲染进程收到消息后，会和网络进程建立传输数据的“管道”，文档数据传输完成后，渲染进程会返回“确认提交”的消息给浏览器进程")]),t._v(" "),s("p",[t._v("\\17. 浏览器收到“确认提交”的消息后，会更新浏览器的页面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新web页面，此时的web页面是空白页")]),t._v(" "),s("p",[t._v("\\18. 渲染进程对文档进行页面解析和子资源加载，HTML 通过HTM 解析器转成DOM Tree（二叉树类似结构的东西），CSS按照CSS 规则和CSS解释器转成CSSOM TREE，两个tree结合，形成render tree（不包含HTML的具体元素和元素要画的具体位置），通过Layout可以计算出每个元素具体的宽高颜色位置，结合起来，开始绘制，最后显示在屏幕中新页面显示出来")]),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"_5-渲染流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-渲染流程"}},[t._v("#")]),t._v(" 5.渲染流程")]),t._v(" "),s("p",[t._v("由于渲染机制过于复杂，所以渲染模块在执行过程中会被划分为很多子阶段，输入的 HTML 经过这些子阶段，最后输出像素。我们把这样的一个处理流程叫做渲染流水线，其大致流程如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618625567631-d35cb165-6e6b-400d-a6b8-fea9b298008a.png",alt:"img"}})]),t._v(" "),s("p",[t._v("按照渲染的时间顺序，流水线可分为如下几个子阶段："),s("strong",[t._v("构建 DOM 树")]),t._v("、"),s("strong",[t._v("样式计算")]),t._v("、"),s("strong",[t._v("布局阶段")]),t._v("、"),s("strong",[t._v("分层")]),t._v("、"),s("strong",[t._v("绘制")]),t._v("、"),s("strong",[t._v("分块")]),t._v("、"),s("strong",[t._v("光栅化")]),t._v("和合成。")]),t._v(" "),s("p",[s("strong",[t._v("（1）构建 DOM 树")])]),t._v(" "),s("p",[t._v("浏览器无法直接理解和使用 HTML，所以需要将 HTML 转换为浏览器能够理解的结构——DOM 树。DOM 是保存在内存中树状结构，可以通过 JavaScript 来查询或修改其内容。DOM 树的构建过程如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/743297/1618625696680-e72dad4f-0d23-4588-b6fa-aca31fbc6655.png",alt:"img"}})]),t._v(" "),s("p",[t._v("DOM 树生成之后， DOM 节点的样式还未生成，要让 DOM 节点拥有正确的样式，这就需要"),s("strong",[t._v("样式计算")]),t._v("了。")]),t._v(" "),s("p",[s("strong",[t._v("（2）样式计算")])]),t._v(" "),s("p",[t._v("样式计算的目的是为了计算出 DOM 节点中每个元素的具体样式，这个阶段大体可分为三步来完成。")]),t._v(" "),s("h3",{attrs:{id:"二、浏览器中的javascript执行机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、浏览器中的javascript执行机制"}},[t._v("#")]),t._v(" 二、浏览器中的Javascript执行机制")]),t._v(" "),s("h4",{attrs:{id:"变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),s("h4",{attrs:{id:"调用栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用栈"}},[t._v("#")]),t._v(" 调用栈")]),t._v(" "),s("h4",{attrs:{id:"块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),s("h4",{attrs:{id:"作用域链和闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链和闭包"}},[t._v("#")]),t._v(" 作用域链和闭包")]),t._v(" "),s("h4",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),s("h3",{attrs:{id:"三、v8工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、v8工作原理"}},[t._v("#")]),t._v(" 三、V8工作原理")]),t._v(" "),s("h4",{attrs:{id:"桟空间和堆空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桟空间和堆空间"}},[t._v("#")]),t._v(" 桟空间和堆空间")]),t._v(" "),s("h4",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("h4",{attrs:{id:"编译器和解释器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[t._v("#")]),t._v(" 编译器和解释器")]),t._v(" "),s("h3",{attrs:{id:"四、浏览器中的页面事件循环系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、浏览器中的页面事件循环系统"}},[t._v("#")]),t._v(" 四、浏览器中的页面事件循环系统")]),t._v(" "),s("h4",{attrs:{id:"消息队列和时间循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列和时间循环"}},[t._v("#")]),t._v(" 消息队列和时间循环")]),t._v(" "),s("h4",{attrs:{id:"webapi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webapi"}},[t._v("#")]),t._v(" WebAPI")]),t._v(" "),s("h4",{attrs:{id:"宏任务和微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),s("h3",{attrs:{id:"五、浏览器中的页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、浏览器中的页面"}},[t._v("#")]),t._v(" 五、浏览器中的页面")]),t._v(" "),s("h4",{attrs:{id:"dom树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom树"}},[t._v("#")]),t._v(" DOM树")]),t._v(" "),s("h4",{attrs:{id:"渲染流水线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线"}},[t._v("#")]),t._v(" 渲染流水线")]),t._v(" "),s("h4",{attrs:{id:"分层和合成机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分层和合成机制"}},[t._v("#")]),t._v(" 分层和合成机制")]),t._v(" "),s("h4",{attrs:{id:"页面性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面性能优化"}},[t._v("#")]),t._v(" 页面性能优化")]),t._v(" "),s("h4",{attrs:{id:"虚拟dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom"}},[t._v("#")]),t._v(" 虚拟DOM")]),t._v(" "),s("h4",{attrs:{id:"pwa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[t._v("#")]),t._v(" PWA")]),t._v(" "),s("h4",{attrs:{id:"webcomponent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webcomponent"}},[t._v("#")]),t._v(" WebComponent")]),t._v(" "),s("h3",{attrs:{id:"六、浏览器中的网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、浏览器中的网络"}},[t._v("#")]),t._v(" 六、浏览器中的网络")]),t._v(" "),s("h4",{attrs:{id:"http-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1"}},[t._v("#")]),t._v(" HTTP/1")]),t._v(" "),s("h4",{attrs:{id:"http-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),s("h4",{attrs:{id:"http-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),s("h4",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),s("h3",{attrs:{id:"七、浏览器-http-缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、浏览器-http-缓存"}},[t._v("#")]),t._v(" 七、浏览器（HTTP）缓存")]),t._v(" "),s("p",[t._v("浏览器缓存分两大类，两大类中又分两小类")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("强缓存")])])]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("Expires")]),t._v(" "),s("li",[t._v("Cache-Control")])])])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("协商缓存")])])]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("Last-Modified + If-Modified-Since")]),t._v(" "),s("li",[t._v("Etag + If-None-Match")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/743297/1619258202202-b5561f17-b135-46fc-8611-f1fd137ce441.jpeg",alt:"img"}})]),t._v(" "),s("p",[t._v("两者的区别主要在于使用缓存的时候,是否需要向服务端验证缓存是否可用")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器第一次向服务端请求资源,服务端按照请求进行处理，将对应资源返回给浏览器做响应；响应状态码为200")])]),t._v(" "),s("li",[s("p",[t._v("当浏览器再次向服务端请求该资源时，先判断这个资源是否命中强缓存，如果命中,直接从缓存中读取资源,而不需要向服务端请求；(强缓存)")])]),t._v(" "),s("li",[s("p",[t._v("如果没有命中强缓存，浏览器会发送一个请求到服务端，服务端根据请求的请求头(request header)字段判断是否命中协商缓存，如果命中，服务端会返回个304的状态码，告知浏览器可以从缓存中读取资源。(协商缓存)")])])]),t._v(" "),s("h4",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),s("p",[t._v("浏览器第一次向服务器请求资源时，服务器响应资源同时告诉浏览器把这个资源保存在本地，并且在有效期内如果再次请求这个资源,直接从本地获取，不需要向服务器请求。这种缓存方式被称为"),s("strong",[t._v("强缓存")]),t._v("。")]),t._v(" "),s("p",[t._v("强缓存通过http的响应头的Expires和Cache-Control:max-age=xxx两个字段来控制。服务端通过这两个字段告诉浏览器资源的缓存过期时间和缓存的最大生命周期.浏览器根据缓存的的过期事件和缓存的最大生命周期,自行判断是否与服务器建立连接，直接从缓存读取资源。")]),t._v(" "),s("p",[s("strong",[t._v("1.Expires")])]),t._v(" "),s("p",[t._v("http1.0规范，值为一个GMT格式的时间字符串如"),s("code",[t._v("Sat, 27 Feb 2021 20:59:11 GMT")]),t._v("，代表资源的过期时间，在这个时间之前，都可以认为这个资源是最新的，不需要从服务器获取。")]),t._v(" "),s("p",[t._v("缓存过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("浏览器第一次请求的时候,会将响应的资源和响应头信息一块缓存起来；")]),t._v(" "),s("li",[t._v("再次请求时，会根据这个资源响应头的过期时间和当前时间做比较，即判断是否命中，如果命中就使用缓存，如果未命中就向服务端请求。")])]),t._v(" "),s("p",[t._v("缺点：响应头上的expires是服务端上的时间，可能与浏览器存在偏差，造成缓存混乱。")]),t._v(" "),s("p",[s("strong",[t._v("2.Cache-Control")])]),t._v(" "),s("p",[t._v("http1.1规范，可以在请求头使用也可以在响应头使用。如max-age=3600，表示第一次获取资源后缓存的有效时间。相比于Expires，max-age是根据本地的时间计算资源的过期时间，更加可靠。当Cache-Control和Expires同时使用时，Cache-Control的优先级高于Expires。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("请求头Cache-Control")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("no-cache - 告知(代理)服务器不直接使用缓存,要求向原服务器发起请求")]),t._v(" "),s("li",[t._v("no-store - 所有内容都不会保存到缓存")])])]),t._v(" "),s("li",[s("ul",[s("li",[s("strong",[t._v("max-age=xxx - 告知服务器返回一个存在时间不超过xxx秒的资源（常用）")])]),t._v(" "),s("li",[t._v("max-stale=xxx - 表示客户端可以接受一个已经过期的资源,如果xxx设置,表示资源的过期时间不能超过xxx秒")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("min-fresh=xxx - 表示客户端希望接受一个xxx秒内更新的资源")]),t._v(" "),s("li",[t._v("no-transform - 表示客户端希望接受的资源没有被转换过,Content-Encoding、Content-Range、Content-Type等http头不能被修改")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("only-if-cached - 表示客户端只接受已缓存的响应")]),t._v(" "),s("li",[t._v("cache-extension - 自定义扩展")])])]),t._v(" "),s("li",[s("p",[t._v("响应头Cache-Control")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("public - 任何情况下都要缓存该资源")]),t._v(" "),s("li",[t._v("private=xxx - 表示响应只能被xxx缓存,其他用户不能缓存")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("no-cahce - 不能直接使用缓存,要向原服务器发起请求")]),t._v(" "),s("li",[t._v("no-store - 所有内容都不会保存到缓存中")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("no-transform - 表示客户端缓存文件时,不得对响应进行转换")]),t._v(" "),s("li",[t._v("only-if-cached - 告知代理服务器使用缓存")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("must-revalidate - 如果超过max-age时间,缓存失效,必须向原服务器请求进行重新验证")]),t._v(" "),s("li",[t._v("proxy-revalidate - 如果缓存失效,必须向代理服务器请求进行重新验证")])])]),t._v(" "),s("li",[s("ul",[s("li",[s("strong",[t._v("max-age=xxx - 表示缓存内容将会在xxx秒后失效（常用）")])]),t._v(" "),s("li",[t._v("s-maxage=xxx - 同max-age,但只对共享缓存有效(public)")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("cache-extension - 自定义扩展")])])])]),t._v(" "),s("p",[t._v("max-age=0与no-cache不是等价的,max-age=0表示缓存在本窗口有效,关闭窗口缓存就失效,no-cache表示不能直接使用缓存(浏览器会进行缓存),需要向服务器发起请求.具体看浏览器区别.")]),t._v(" "),s("h4",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("p",[t._v("协商缓存利用 "),s("strong",[t._v("Last-Modified + If-Modified-Since")]),t._v(" 和 "),s("strong",[t._v("Etag + If-None-Match")]),t._v(" 实现。")]),t._v(" "),s("p",[t._v("Etag的精确度要高于Last-Modified，但是性能上Etag要差于Last-Modified。")]),t._v(" "),s("p",[t._v("服务端上 "),s("strong",[t._v("Etag + If-None-Match")]),t._v(" 优先级要高于 "),s("strong",[t._v("Last-Modified + If—Modified-Since。")])]),t._v(" "),s("p",[s("strong",[t._v("1.Last-Modified + If-Modified-Since")])]),t._v(" "),s("p",[t._v("If-Modified-Since 是请求头，Last-Modified 是响应头，通过比较这两个时间,服务器判断资源是否有过修改，如果没有修改，命中协商缓存，浏览器从缓存读取资源，如果修改了，服务器返回新的资源和新的Last-Modified。")]),t._v(" "),s("p",[t._v("缓存过程如下：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器第一次向服务器请求资源，服务器返回资源同时在响应头中添加Last-Modified，表示资源在服务器上的最后一次的修改时间，浏览器将资源和Last-Modified一起缓存")])]),t._v(" "),s("li",[s("p",[t._v("当再次请求时，会在请求头中添加If-Modified-Since = 上一次缓存的Last-Modified")])]),t._v(" "),s("li",[s("p",[t._v("服务器收到请求，比较资源的最后修改时间和If-Modified-Since，如果一致，命中协商缓存，返回304，浏览器从缓存中读取资源；如果不一致，服务器返回200 + 新的资源,响应头Last-Modified也进行更新。")])])]),t._v(" "),s("p",[t._v("有的时候呢，因为服务器上资源会出现周期性更新，资源修改时间改变了但是内容没有改变(脚本执行后台任务)，更新的信息无关紧要(添加注释)，资源的更新频率小于1秒(Last-Modified无法精确到毫秒)，所以这个时候采用Last-Modified+If-Modified-Since就不能准确的验证资源是否需要更新。")]),t._v(" "),s("p",[s("strong",[t._v("2.Etag + If-None-Match")])]),t._v(" "),s("p",[t._v("为解决上述问题，http同意用户对资源打上Etag(采用MD5等密码散列函数对资源编码获得标签或者通过版本号等方式)区分相同路径下的资源内容是否一致。If-None-Match 是请求头，Etag 是响应头，表示资源内容的唯一标示，随response返回。")]),t._v(" "),s("p",[t._v("缓存过程如下：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器第一次向服务器请求资源时，服务器返回资源同时在响应头中添加Etag，这个Etag是根据该资源生成的唯一标示，只要服务器认为资源有变化且应该提供新资源时，Etag就必须改变,浏览器将资源和Etag一起缓存。")])]),t._v(" "),s("li",[s("p",[t._v("当再次请求时，会在请求头中添加If-None-Match = 上一次缓存的Etag")])]),t._v(" "),s("li",[s("p",[t._v("服务器根据请求的资源重新生成Etag，然后和If-None-Match对比，如果一致,命中协商缓存，返回304，浏览器从缓存中读取资源，如果不一致，服务器返回200 + 新的资源，同时将新的Etag返回。")])])]),t._v(" "),s("h4",{attrs:{id:"启发式缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存"}},[t._v("#")]),t._v(" 启发式缓存")]),t._v(" "),s("p",[t._v("如果响应头中未显示Expires和Cache-Control:max-age 或者 Cache-Control:s-maxage，并且响应中不包含其他有关缓存的限制，缓存可以采用启发式方法计算新鲜度寿命。通常会根据响应头中的2个时间字段Date减去Last-Modified值的10%作为缓存时间。")]),t._v(" "),s("p",[t._v("// Date:创建报文的日期\n// Last-Modified:服务器声明文档的最后修改日期\n"),s("code",[t._v("response_is_fresh = max(0,(Date - Last-Modified))/10")])]),t._v(" "),s("h4",{attrs:{id:"缓存优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存优先级"}},[t._v("#")]),t._v(" 缓存优先级")]),t._v(" "),s("p",[t._v("命中强缓存后，浏览器同样会显示状态码200的response，这时可以通过network下的size判断哪个是从服务端获取，哪个是从缓存获取的。这里就分为 memory cache(内存中的缓存)、disk cache(硬盘中的缓存)。memory cache的优先级要高于disk cache。(先读内存再度硬盘)")]),t._v(" "),s("p",[t._v("几乎所有的网络请求资源都会被浏览器自动加入到memory cache中，但是因为请求资源的数量和浏览器的内存两个原因，memory cache只能作为短期存储，当前页面关闭清除memory cache。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("memory cache: 将资源存储到内存中,下次访问时直接从内存中读取. "),s("link",{attrs:{rel:"preloader"}}),t._v("或者"),s("link",{attrs:{rel:"preload"}}),t._v("的资源必定会放入memory cache中.浏览器会在js和图片等文件解析完成(脚本、字体、图片)后存入到memory cache,刷新页面时直接从memory cache中读取(脚本随时可能执行),速度快,时间短")])]),t._v(" "),s("li",[s("p",[t._v("disk cache: 将资源(非脚本文件)存储到硬盘中,下次访问时直接从硬盘中读取. 持久存储,实际存在于文件系统中,它可以在相同的资源在跨会话甚至跨站点的情况下使用.disk cache会严格根据http头信息判断资源的缓存策略,当命中缓存时,从硬盘中获取资源(强缓存方式).浏览器会将css文件放入到disk cache,渲染页面时直接从disk cache中读取缓存(css加载一次就渲染出来了不需要频繁读取).")])]),t._v(" "),s("li",[s("p",[t._v("push cache(推送缓存):http/2的内容,它存在于会话(session)中,一旦会话结束就会被释放,并且缓存的时间也很短暂,但是不同的浏览器厂商支持的也不一样。")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("所有的资源都可以利用push cache缓存")]),t._v(" "),s("li",[t._v("可以推送no-cache和no-store的资源")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("push cache是http缓存中的最后一级")]),t._v(" "),s("li",[t._v("一旦连接关闭,会话结束,缓存就会被释放")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("多个页面可以使用同一个http/2连接,那么也就可以使用同一个push cache")]),t._v(" "),s("li",[t._v("push cache 中的缓存只能被使用一次")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("浏览器可以接受已经存在的资源推送")]),t._v(" "),s("li",[t._v("跨域推送资源")])])])]),t._v(" "),s("p",[t._v("在这些缓存之上,还存在一个service worker,它使你可以通过JS优先使用缓存,如果service worker没有命中缓存,那么接下来才会是上面的缓存.即 service worker(JS) > memory cache > disk cache(强缓存) > push cache(http/2) > request(协商缓存).")]),t._v(" "),s("h4",{attrs:{id:"浏览器触发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器触发"}},[t._v("#")]),t._v(" 浏览器触发")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("地址栏回车/右键跳转 - 浏览器以最少的请求获取网页内容,使用强缓存")])]),t._v(" "),s("li",[s("p",[t._v("F5刷新/浏览器刷新按钮 - 浏览器使用协商缓存,不予许直接使用强缓存")])]),t._v(" "),s("li",[s("p",[t._v("CTRL + F5 - 直接请求,不使用缓存")])])]),t._v(" "),s("h4",{attrs:{id:"浏览器缓存过程流程图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存过程流程图"}},[t._v("#")]),t._v(" 浏览器缓存过程流程图")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/webp/743297/1619271765145-b04ced47-4921-4c2d-8187-3cf4bddd4795.webp",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"八、浏览器安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、浏览器安全"}},[t._v("#")]),t._v(" 八、浏览器安全")]),t._v(" "),s("h4",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),s("p",[t._v("同源：协议，域名，端口三者相同。")]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com 和 http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("search  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同源")]),t._v("\nhttp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com 和 https"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同源，协议不同")]),t._v("\nhttp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("music"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com 和 http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tieba"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同源，域名不同")]),t._v("\nhttp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("81")]),t._v(" 和 http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("82")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同源，端口不同")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("同源策略是浏览器自身增加的安全限制。")]),t._v(" "),s("h4",{attrs:{id:"跨站脚本攻击xss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨站脚本攻击xss"}},[t._v("#")]),t._v(" 跨站脚本攻击XSS")]),t._v(" "),s("p",[t._v("跨网站指令码（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程序代码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了 HTML 以及使用者端脚本语言。")]),t._v(" "),s("p",[t._v("XSS 分为三种：反射型，存储型和 DOM-based")]),t._v(" "),s("p",[s("strong",[t._v("攻击方式")])]),t._v(" "),s("p",[t._v("XSS 通过修改 HTML 节点或者执行 JS 代码来攻击网站。")]),t._v(" "),s("p",[t._v("例如通过 URL 获取某些参数")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("domain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("上述 URL 输入可能会将 HTML 改为"),s("code",[t._v("<div><script>alert(1)<\/script></div>")]),t._v("，这样页面中就凭空多了一段可执行脚本。这种攻击类型是反射型攻击，也可以说是 DOM-based 攻击。")]),t._v(" "),s("p",[s("strong",[t._v("防御措施")])]),t._v(" "),s("p",[t._v("最普遍的做法是使用正则匹配需要转义的字符，转义输入输出的内容，对于"),s("strong",[t._v("引号")]),t._v("，"),s("strong",[t._v("尖括号")]),t._v("，"),s("strong",[t._v("斜杠")]),t._v("进行转义。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&amp;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&lt;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&gt;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&quto;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("'")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&#39;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&#96;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\/")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&#x2F;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("通过转义可以将攻击代码"),s("code",[t._v("<script>alert(1)<\/script>")]),t._v("变成")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> &lt;script&gt;alert(1)&lt;&#x2F;script&gt;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<script>alert(1)<\/script>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("对于显示富文本来说，不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。这种情况通常采用"),s("strong",[t._v("白名单过滤")]),t._v("的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xss "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xss'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xss")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\'')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("以上示例使用了js-xss来实现。可以看到在输出中保留了h1标签且过滤了script标签")]),t._v(" "),s("h4",{attrs:{id:"csrf攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击"}},[t._v("#")]),t._v(" CSRF攻击")]),t._v(" "),s("p",[t._v("跨站请求伪造（英语：Cross-site request forgery），也被称为one-click attack或者session riding，通常缩写为CSRF或者XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。跟跨网站指令码（XSS）相比，XSS利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。")]),t._v(" "),s("p",[t._v("简单点说，CSRF 就是利用用户的登录态发起恶意请求。")]),t._v(" "),s("p",[s("strong",[t._v("攻击方式")])]),t._v(" "),s("p",[t._v("例如某家银行的转账 API 的URL 是这样的：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("examplebank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("withdraw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("account"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("AccoutName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("PayeeName\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("而恶意用户如果在网站中塞进一个 "),s("img"),t._v(" 的话：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("当不知情的用户浏览到攻击者的网站时，"),s("img"),t._v(" 会自动发出这个请求，如果用户登录银行的 Session 尚未过期，那么这个请求很可能就会被银行接受，最后会在用户本人不知情的情况下“被”转帐。")]),t._v(" "),s("p",[t._v("这种攻击方式可以与前面所说的 XSS 是相辅相成，例如在没有防范 XSS 的论坛网站中植入 "),s("img"),t._v("，那么其 src 属性就应该是获取敏感信息的 API URL。")]),t._v(" "),s("p",[s("strong",[t._v("防御措施")])]),t._v(" "),s("p",[t._v("防范 CSRF 可以遵循以下几种规则：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Get 请求不对数据进行修改")])]),t._v(" "),s("li",[s("p",[t._v("不让第三方网站访问到用户 Cookie")])]),t._v(" "),s("li",[s("p",[t._v("阻止第三方网站请求接口")])]),t._v(" "),s("li",[s("p",[t._v("请求时附带验证信息，比如验证码或者 token")])])]),t._v(" "),s("p",[s("strong",[t._v("1.SameSite")])]),t._v(" "),s("p",[t._v("可以对 Cookie 设置SameSite属性。该属性设置 Cookie 不随着跨域请求发送，该属性可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。")]),t._v(" "),s("p",[s("strong",[t._v("2.验证 Referer")])]),t._v(" "),s("p",[t._v("在服务器端检查请求头中 Referer 的值，也就是检查请求的来源，如果是来自允许的网站，才会正常执行 API 的功能。")]),t._v(" "),s("p",[s("strong",[t._v("3.CSRF Token")])]),t._v(" "),s("p",[t._v("在 Cookie 及请求发送的数据中都加上csrftoken，并检查值是否相同，如果请求来源是自己的网站验证就会通过；反之，由于外部网站无法在代码中得到其他网站的 Cookie，因此无法在请求中带上csrftoken。")]),t._v(" "),s("h4",{attrs:{id:"安全沙箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全沙箱"}},[t._v("#")]),t._v(" 安全沙箱")]),t._v(" "),s("h4",{attrs:{id:"https-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-2"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),s("h3",{attrs:{id:"-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=e.exports}}]);